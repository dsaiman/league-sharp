﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Reflection;
using LeagueSharp;
using LeagueSharp.Common;
using SharpDX;

namespace ExploitTest
{
	 class Program
    {
        public static Menu Config;
        public static Items.Item TrinketN = new Items.Item(3340, 600f);
        private static Spell _Q = new Spell(SpellSlot.Q, 99999, TargetSelector.DamageType.Physical);
        private static Spell _W = new Spell(SpellSlot.W, 99999, TargetSelector.DamageType.Physical);
        private static Spell _E = new Spell(SpellSlot.E, 99999, TargetSelector.DamageType.Physical);
        static void Main(string[] args)
        {
            CustomEvents.Game.OnGameLoad += OnGameLoad;
        }


        private static void OnGameLoad(EventArgs args)
        {
            Config = new Menu("Exploit Framework", "Exploit", true);
            Config.AddSubMenu(new Menu("Exploits", "Exploits"));
            Config.SubMenu("Exploits").AddItem(new MenuItem("LAG", "Lag exploit")).SetValue(new KeyBind("H".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits").AddItem(new MenuItem("LAG2", "Lag exploit")).SetValue(new KeyBind("J".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits").AddItem(new MenuItem("LAG3", "Lag exploit")).SetValue(new KeyBind("K".ToCharArray()[0], KeyBindType.Toggle));
            Config.SubMenu("Exploits").AddItem(new MenuItem("ModoXward", "Lag Trinket").SetValue(new KeyBind('Z', KeyBindType.Press)));
            Config.AddToMainMenu();
            Game.PrintChat("Creado por Aidemu, RIP L# 1/30/215");
            Game.OnGameUpdate += game_Update;
        }

        private static void game_Update(EventArgs args)
        {
            if (Config.Item("LAG").GetValue<KeyBind>().Active)
            {
                foreach (Obj_AI_Base minion in ObjectManager.Get<Obj_AI_Base>().Where(minion => minion.IsEnemy))
                {
                    if (minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    {
                        _Q.CastOnUnit(minion);
                    }
                }
            }

            if (Config.Item("LAG2").GetValue<KeyBind>().Active)
            {
                foreach (Obj_AI_Base minion in ObjectManager.Get<Obj_AI_Base>().Where(minion => minion.IsEnemy))
                {
                    if (minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    {
                        _W.CastOnUnit(minion);
                    }
                }
            }

            if (Config.Item("LAG3").GetValue<KeyBind>().Active)
            {
                foreach (Obj_AI_Base minion in ObjectManager.Get<Obj_AI_Base>().Where(minion => minion.IsEnemy))
                {
                    if (minion.ServerPosition.Distance(ObjectManager.Player.ServerPosition) > 1000)
                    {
                        _E.CastOnUnit(minion);
                    }
                }
            }
            if (Config.Item("ModoXward").GetValue<KeyBind>().Active)
            {
                if (TrinketN.IsReady())
                {
                    TrinketN.Cast(new Vector3(2729, 10879, -71f));
                    TrinketN.Cast(new Vector3(2303, 10868, 53f));
                    TrinketN.Cast(new Vector3(5223, 6789, 50f));
                    TrinketN.Cast(new Vector3(5191, 7137, 50f));
                    TrinketN.Cast(new Vector3(8368, 4594, 51f));
                    TrinketN.Cast(new Vector3(8100, 3429, 51f));
                    TrinketN.Cast(new Vector3(4634, 11283, 49f));
                    TrinketN.Cast(new Vector3(6672, 11466, 53f));
                    TrinketN.Cast(new Vector3(6518, 10367, 53f));
                    TrinketN.Cast(new Vector3(9572, 8038, 57f));
                    TrinketN.Cast(new Vector3(9697, 7854, 51f));
                    TrinketN.Cast(new Vector3(12235, 4068, -68f));
                    TrinketN.Cast(new Vector3(12443, 4021, -7f));
                    return;
                }
            }
        }
    }
}